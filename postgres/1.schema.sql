DROP TABLE IF EXISTS cart;
DROP TABLE IF EXISTS member;
DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS orders_line;
DROP TABLE IF EXISTS ticket;
DROP TABLE IF EXISTS ticket_cart;
DROP TABLE IF EXISTS event;
DROP TABLE IF EXISTS refund;
DROP TABLE IF EXISTS venue;
DROP TABLE IF EXISTS payment;


-- Cart 테이블 생성
CREATE TABLE cart (
                      cart_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      quantity INTEGER NOT NULL,
                      create_at TIMESTAMP(6),
                      update_at TIMESTAMP(6),
                      cart_status VARCHAR(255) NOT NULL CHECK (cart_status IN ('ACTIVE','PURCHASED','EXPIRED')),
                      member_id BIGINT NOT NULL,
                      ticket_id BIGINT NOT NULL
);

-- Event 테이블 생성
CREATE TABLE event (
                       event_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       total_tickets INTEGER NOT NULL,
                       create_at TIMESTAMP(6),
                       update_at TIMESTAMP(6),
                       venue_id BIGINT,
                       event_date TIMESTAMP(6) NOT NULL,
                       event_type VARCHAR(25) NOT NULL CHECK (event_type IN ('PLAY','MUSICAL','PERFORMANCE')),
                       event_name VARCHAR(50) NOT NULL,
                       event_status VARCHAR(255) CHECK (event_status IN ('PLANNED','ONGOING','COMPLETED','CANCELLED')),
                       UNIQUE (event_date)
);

-- Member 테이블 생성
CREATE TABLE member (
                        member_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        create_at TIMESTAMP(6),
                        update_at TIMESTAMP(6),
                        address1 VARCHAR(255) NOT NULL,
                        address2 VARCHAR(255) NOT NULL,
                        email VARCHAR(255) NOT NULL UNIQUE,
                        member_name VARCHAR(255) NOT NULL,
                        password VARCHAR(255) NOT NULL,
                        phone_number VARCHAR(255) NOT NULL UNIQUE,
                        role VARCHAR(255)
);

-- Orders 테이블 생성
CREATE TABLE orders (
                        orders_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        create_at TIMESTAMP(6),
                        update_at TIMESTAMP(6),
                        orders_price INTEGER,
                        orders_status VARCHAR(255) CHECK (orders_status IN ('ONGOING','CANCELLED','PAID','REFUNDED')),
                        member_id BIGINT NOT NULL,
                        payment_payment_id BIGINT UNIQUE
);

-- OrdersLine 테이블 생성
CREATE TABLE orders_line (
                             orders_id BIGINT NOT NULL,
                             ticket_id BIGINT NOT NULL,
                             price INTEGER NOT NULL,
                             quantity INTEGER NOT NULL,
                             PRIMARY KEY (orders_id, ticket_id)
);

-- Payment 테이블 생성
CREATE TABLE payment (
                         payment_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         payment_amount INTEGER NOT NULL,
                         create_at TIMESTAMP(6),
                         update_at TIMESTAMP(6),
                         payment_method VARCHAR(255) NOT NULL CHECK (payment_method IN ('CREDIT_CARD','ACCOUNT_TRANSFER')),
                         payment_status VARCHAR(255) NOT NULL CHECK (payment_status IN ('COMPLETED','REFUNDED')),
                         orders_id BIGINT NOT NULL UNIQUE,
                         refund_id BIGINT UNIQUE
);

-- Refund 테이블 생성
CREATE TABLE refund (
                        refund_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        refund_amount INTEGER NOT NULL,
                        create_at TIMESTAMP(6),
                        update_at TIMESTAMP(6),
                        refund_status VARCHAR(255) NOT NULL CHECK (refund_status IN ('REFUNDED')),
                        orders_id BIGINT NOT NULL UNIQUE,
                        payment_id BIGINT NOT NULL UNIQUE
);

-- Ticket 테이블 생성
CREATE TABLE ticket (
                        ticket_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        price INTEGER NOT NULL,
                        seat_number INTEGER NOT NULL,
                        open_timestamp TIMESTAMP(6) NOT NULL,
                        ticket_no UUID NOT NULL,
                        display VARCHAR(255) NOT NULL CHECK (display IN ('YES','NO')),
                        ticket_grade VARCHAR(255) NOT NULL CHECK (ticket_grade IN ('VIP','REGULAR','ECONOMY')),
                        ticket_status VARCHAR(255) NOT NULL CHECK (ticket_status IN ('ENROLLED','RESERVED','ORDERED','SOLD')),
                        event_id BIGINT,
                        order_id BIGINT
);

-- Venue 테이블 생성
CREATE TABLE venue (
                       venue_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       capacity INTEGER NOT NULL,
                       location VARCHAR(255) NOT NULL,
                       venue_name VARCHAR(255) NOT NULL UNIQUE
);

-- 외래 키 제약 조건 추가
ALTER TABLE cart
    ADD CONSTRAINT FKix170nytunweovf2v9137mx2o FOREIGN KEY (member_id) REFERENCES member;

ALTER TABLE cart
    ADD CONSTRAINT FKlqidftlwg4yj3fmmtnvaj480s FOREIGN KEY (ticket_id) REFERENCES ticket;

ALTER TABLE event
    ADD CONSTRAINT FKthgbmd6s6hp4l47kx1sh4cf9n FOREIGN KEY (venue_id) REFERENCES venue;

ALTER TABLE orders
    ADD CONSTRAINT FKpktxwhj3x9m4gth5ff6bkqgeb FOREIGN KEY (member_id) REFERENCES member;

ALTER TABLE orders
    ADD CONSTRAINT FKs3qubols92e6p6bd1rfhfnhy7 FOREIGN KEY (payment_payment_id) REFERENCES payment;

ALTER TABLE orders_line
    ADD CONSTRAINT FKjgei7v9gh4yv2vi0l5x4f8hjo FOREIGN KEY (orders_id) REFERENCES orders;

ALTER TABLE orders_line
    ADD CONSTRAINT FK2q17gy2vqwe3lpmn37m2qko40 FOREIGN KEY (ticket_id) REFERENCES ticket;

ALTER TABLE payment
    ADD CONSTRAINT FK2tuuxhx91545ge3pvefdhr9g7 FOREIGN KEY (orders_id) REFERENCES orders;

ALTER TABLE payment
    ADD CONSTRAINT FKhjbrssuwcnn4ol5l779th4dx5 FOREIGN KEY (refund_id) REFERENCES refund;

ALTER TABLE refund
    ADD CONSTRAINT FKdd6nwlaocyfc07po14r84j5fp FOREIGN KEY (orders_id) REFERENCES orders;

ALTER TABLE refund
    ADD CONSTRAINT FKeoh1147brjy6m009cswl5lty4 FOREIGN KEY (payment_id) REFERENCES payment;

ALTER TABLE ticket
    ADD CONSTRAINT FKfytuhjopeamxbt1cpudy92x5n FOREIGN KEY (event_id) REFERENCES event;

ALTER TABLE ticket
    ADD CONSTRAINT FKfxop4bl4yxuwgij2pa9ghtal6 FOREIGN KEY (order_id) REFERENCES orders;
